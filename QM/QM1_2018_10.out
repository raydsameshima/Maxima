Maxima 5.41.0 http://maxima.sourceforge.net
using Lisp SBCL 1.4.7
Distributed under the GNU Public License. See the file COPYING.
Dedicated to the memory of William Schelter.
The function bug_report() provides bug reporting information.
maxima_userdir is  /home/rds/.maxima 
(%i1) batch("QM1_2018_10.mac")

read and interpret file: /home/rds/Documents/Maxima/QM/QM1_2018_10.mac
(%i2) kill(all)
(%i1) load("SHO.mac")
SHO.mac
 
This .mac file can provide the i-th state
  bra(i)
  ket(i),
L,R of ladder operator, and the matrix representation of operators:
  mat_rep(linear_op, size_of_matrix);
  
Use i and j for indices, e.g.,
  bra(i) . linear_op . ket(j);
to see the indexed expression of a linear_op.
 
(%i2) "Question 1 a)"
(%i3) declare([m,w,h],[scalar])
(%o3)                                done
(%i4) sol:factor(solve([L = (1/sqrt(2*m*w*h))*(p-%i*m*w*x),
                        R = (1/sqrt(2*m*w*h))*(p+%i*m*w*x)],[x,p]))
                   %i sqrt(h m w) (R - L)      sqrt(h m w) (R + L)
(%o4)      [[x = - ----------------------, p = -------------------]]
                        sqrt(2) m w                  sqrt(2)
(%i5) x:ev(x,sol)
                             %i sqrt(h m w) (R - L)
(%o5)                      - ----------------------
                                  sqrt(2) m w
(%i6) p:ev(p,sol)
                              sqrt(h m w) (R + L)
(%o6)                         -------------------
                                    sqrt(2)
(%i7) "Since we've imposed a \"canonical order\" for L and R for ket's, L.R will appear."
(%i8) expand(p^^2/(2*m)+(m*w^2*x^^2)/2)
                                             h w
(%o8)                          h w (L . R) - ---
                                              2
(%i9) factor(expand(% . ket(i)))
                             h (2 i + 1) ket(i) w
(%o9)                        --------------------
                                      2
(%i10) "c) Define a state "
(%i11) declare(N,[scalar,real])
(%o11)                               done
(%i12) s:N*(3*ket(0)+sqrt(3)*ket(1)+2*ket(3))
(%o12)             (2 ket(3) + sqrt(3) ket(1) + 3 ket(0)) N
(%i13) sd:conjugate(s)
(%o13)             (2 bra(3) + sqrt(3) bra(1) + 3 bra(0)) N
(%i14) "The normalization condition should be:"
(%i15) sol:solve(sd . s = 1,N)
                                      1      1
(%o15)                         [N = - -, N = -]
                                      4      4
(%i16) "Therefore, we have"
(%i17) s:at(s,sol[2])
                     2 ket(3) + sqrt(3) ket(1) + 3 ket(0)
(%o17)               ------------------------------------
                                      4
(%i18) sd:at(sd,sol[2])
                     2 bra(3) + sqrt(3) bra(1) + 3 bra(0)
(%o18)               ------------------------------------
                                      4
(%i19) expand(sd . s)
(%o19)                                 1
(%i20) [expand(bra(0) . s)^2,expand(bra(1) . s)^2,expand(bra(3) . s)^2]
                                   9   3   1
(%o20)                            [--, --, -]
                                   16  16  4
(%i21) sum(%[i],i,1,length(%))
(%o21)                                 1
(%i22) "d) x and p in energy eigen space."
(%i23) "So x and p are essentially (R-L) and (R+L) "
(%i24) "To see the non-zero elements of x, and x^^2: "
(%i25) factor(expand(bra(i) . x . ket(j)))
(%o25) - (%i (kron_delta(i, j + 1) sqrt(j + 1) - kron_delta(i, j - 1) sqrt(j))
                                                     sqrt(h m w))/(sqrt(2) m w)
(%i26) factor(expand(bra(i) . x^^2 . ket(j)))
(%o26) - (h (kron_delta(i, j + 2) sqrt(j + 1) sqrt(j + 2)
 - 2 kron_delta(i, j) j + kron_delta(i, j - 2) sqrt(j - 1) sqrt(j)
 - kron_delta(i, j)))/(2 m w)
(%i27) "The matrix representations are"
(%i28) mat_rep(x,4)
                [             0             ]
                [                           ]
                [         %i sqrt(h)        ]
                [ - ----------------------- ]
(%o28)  Col 1 = [   sqrt(2) sqrt(m) sqrt(w) ]
                [                           ]
                [             0             ]
                [                           ]
                [             0             ]
         [       %i sqrt(h)        ]         [             0             ]
         [ ----------------------- ]         [                           ]
         [ sqrt(2) sqrt(m) sqrt(w) ]         [        %i sqrt(h)         ]
         [                         ]         [      ---------------      ]
         [            0            ]         [      sqrt(m) sqrt(w)      ]
 Col 2 = [                         ] Col 3 = [                           ]
         [        %i sqrt(h)       ]         [             0             ]
         [    - ---------------    ]         [                           ]
         [      sqrt(m) sqrt(w)    ]         [     sqrt(3) %i sqrt(h)    ]
         [                         ]         [ - ----------------------- ]
         [            0            ]         [   sqrt(2) sqrt(m) sqrt(w) ]
         [            0            ]
         [                         ]
         [            0            ]
         [                         ]
 Col 4 = [   sqrt(3) %i sqrt(h)    ]
         [ ----------------------- ]
         [ sqrt(2) sqrt(m) sqrt(w) ]
         [                         ]
         [            0            ]
(%i29) mat_rep(x^^2,4)
        [       h                              h                     ]
        [     -----            0        - -----------        0       ]
        [     2 m w                       sqrt(2) m w                ]
        [                                                            ]
        [                     3 h                         sqrt(3) h  ]
        [       0            -----            0        - ----------- ]
        [                    2 m w                       sqrt(2) m w ]
(%o29)  [                                                            ]
        [        h                           5 h                     ]
        [ - -----------        0            -----            0       ]
        [   sqrt(2) m w                     2 m w                    ]
        [                                                            ]
        [                   sqrt(3) h                       7 h      ]
        [       0        - -----------        0            -----     ]
        [                  sqrt(2) m w                     2 m w     ]
(%i30) "Using indices"
(%i31) ev(bra(i) . (R-L) . ket(j),expand)
(%o31)  kron_delta(i, j + 1) sqrt(j + 1) - kron_delta(i, j - 1) sqrt(j)
(%i32) ev(bra(i) . (R-L)^^2 . ket(j),expand)
(%o32) kron_delta(i, j + 2) sqrt(j + 1) sqrt(j + 2) - 2 kron_delta(i, j) j
                  + kron_delta(i, j - 2) sqrt(j - 1) sqrt(j) - kron_delta(i, j)
(%i33) "Since x is essentially R-L,"
(%i34) mat_rep(R-L,4)
                     [ 0    - 1        0          0     ]
                     [                                  ]
                     [ 1     0     - sqrt(2)      0     ]
(%o34)               [                                  ]
                     [ 0  sqrt(2)      0      - sqrt(3) ]
                     [                                  ]
                     [ 0     0      sqrt(3)       0     ]
(%i35) mat_rep((R-L)^^2,4)
            [   - 1           0         sqrt(2)         0        ]
            [                                                    ]
            [    0           - 3           0     sqrt(2) sqrt(3) ]
(%o35)      [                                                    ]
            [ sqrt(2)         0           - 5           0        ]
            [                                                    ]
            [    0     sqrt(2) sqrt(3)     0           - 7       ]
(%i36) "e) <x>_s and <x^2>_s in t=0:"
(%i37) x
                             %i sqrt(h m w) (R - L)
(%o37)                     - ----------------------
                                  sqrt(2) m w
(%i38) x^^2
                                           <2>
                                  h (R - L)
(%o38)                          - ------------
                                     2 m w
(%i39) expand(sd . x . s)
(%o39)                                 0
(%i40) expand(sd . expand(x^^2 . s))
                                23 h      3 h
(%o40)                         ------ - --------
                               16 m w    5/2
                                        2    m w
(%i41) "Let us consider time evolution. "
(%i42) declare(U,nonscalar)
(%o42)                               done
(%i43) declare([t],[scalar,real])
(%o43)                               done
(%i44) tellsimp(U(t) . ket(i),exp((-%i)*t*w*(i+1/2))*ket(i))
(%o44) [.rule11, .rule10, .rule9, .rule8, .rule7, .rule6, .rule5, .rule4, 
                                               .rule3, .rule2, .rule1, simpnct]
(%i45) tellsimp(bra(i) . U(t),conjugate(U(t) . ket(i)))
(%o45) [.rule12, .rule11, .rule10, .rule9, .rule8, .rule7, .rule6, .rule5, 
                                       .rule4, .rule3, .rule2, .rule1, simpnct]
(%i46) "f) The state in t and the expectation value for x are"
(%i47) s(t):=expand(U(t) . s)
(%o47)                     s(t) := expand(U(t) . s)
(%i48) exp_x:expand(demoivre(expand(conjugate(s(t)) . x . s(t))))
                            3/2
                           3    sqrt(h m w) sin(t w)
(%o48)                     -------------------------
                                    7/2
                                   2    m w
(%i49) exp_x2:expand(demoivre(expand(conjugate(s(t)) . expand(x^^2 . s(t)))))
                             23 h    3 h cos(2 t w)
(%o49)                      ------ - --------------
                            16 m w       5/2
                                        2    m w
(%i50) trigsimp(exp_x2-exp_x^2)
                                                2            7/2
              96 h cos(2 t w) + 27 sqrt(2) h sin (t w) - 23 2    h
(%o50)      - ----------------------------------------------------
                                    15/2
                                   2     m w
(%i51) "Question 2, solutions of wave equation."
(%i52) kill(h,m,k,x,rho)
(%o52)                               done
(%i53) declare([h,m,k,x,rho],[scalar,real])
(%o53)                               done
(%i54) declare([A,B,C,D],[scalar,complex])
(%o54)                               done
(%i55) phi[1](x):=A*exp(%i*k*x)+B*exp((-%i)*k*x)
(%o55)           phi (x) := A exp(%i k x) + B exp((- %i) k x)
                    1
(%i56) phi[2](x):=C*exp(rho*x)+D*exp((-rho)*x)
(%o56)            phi (x) := C exp(rho x) + D exp((- rho) x)
                     2
(%i57) current1:(((-%i)*h)/m)*conjugate(phi[1](x))*diff(phi[1](x),x,1)
                               %i k x                  - %i k x
(%o57) - (%i h (conjugate(B) %e       + conjugate(A) %e        )
                                                 %i k x            - %i k x
                                       (%i A k %e       - %i B k %e        ))/m
(%i58) trigsimp(realpart(expand(demoivre(expand(current1)))))
                  2              2              2              2
         (realpart (B) + imagpart (B) - realpart (A) - imagpart (A)) h k
(%o58) - ---------------------------------------------------------------
                                        m
(%i59) "So there is no interference, and they are essentially j_in - j_out"
(%i60) current2:(((-%i)*h)/m)*conjugate(phi[2](x))*diff(phi[2](x),x,1)
                               rho x                  - rho x
(%o60) - (%i h (conjugate(C) %e      + conjugate(D) %e       )
                                                    rho x           - rho x
                                           (C rho %e      - D rho %e       ))/m
(%i61) c2:radcan(realpart(expand(current2)))
         (2 imagpart(C) realpart(D) - 2 realpart(C) imagpart(D)) h rho
(%o61)   -------------------------------------------------------------
                                       m
(%i62) "Only interference terms, and this combination is essentially "
(%i63) imagpart(conjugate(D)*C)
(%o63)         imagpart(C) realpart(D) - realpart(C) imagpart(D)
(%i64) "Question 3 a) and b) Dirac-delta potential well."
(%i65) assume(h > 0,m > 0,E < 0,k > 0,a > 0)
(%o65)                [h > 0, m > 0, E < 0, k > 0, a > 0]
(%i66) "Let me define a wave function, where k:sqrt(2*m*(-E)/h^2)"
(%i67) phi[1](x):=A*exp(k*x)
(%o67)                       phi (x) := A exp(k x)
                                1
(%i68) phi[2](x):=A*exp((-k)*x)
(%o68)                     phi (x) := A exp((- k) x)
                              2
(%i69) "Let me set an integrated Schroedinger eq, with Dirac delta part on the right:"
(%i70) s_eq:at(diff(phi[2](x),x,1)-diff(phi[1](x),x,1),x = 0)
             = ((2*m)/h^2)*(-a)*phi[1](0)
                                          2 A m a
(%o70)                        - 2 A k = - -------
                                             2
                                            h
(%i71) k_sol:solve(s_eq,k)
                                        m a
(%o71)                             [k = ---]
                                         2
                                        h
(%i72) "Substituting the definition of k, we can solve this equation for E to get the bound state energy:"
(%i73) solve(ev(k_sol,k:sqrt((2*m*(-E))/h^2)),E)
                                           2
                                        m a
(%o73)                           [E = - ----]
                                           2
                                        2 h
(%i74) "c), d), e) and f)."
(%i75) "Let me consider symmetric solution for 0<=x: "
(%i76) psi[1](x):=A*(exp(k*x)+exp((-k)*x))
define: warning: redefining built-in subscripted function psi
(%o76)              psi (x) := A (exp(k x) + exp((- k) x))
                       1
(%i77) psi[2](x):=B*A*exp((-k)*x)
(%o77)                    psi (x) := B A exp((- k) x)
                             2
(%i78) c_eq:psi[1](a) = psi[2](a)
                            k a     - k a          - k a
(%o78)                 A (%e    + %e     ) = A B %e
(%i79) define(psi[2](x),at(psi[2](x),solve(c_eq,B)))
                                     - k x    2 k a
(%o79)                psi (x) := A %e      (%e      + 1)
                         2
(%i80) q_eq:((-h^2)/(2*m))*at(diff(psi[2](x)-psi[1](x),x,1),x = a)
             = (-(-alpha))*psi[1](a)
          2           - k a    2 k a                k a       - k a
         h  ((- A k %e      (%e      + 1)) - A (k %e    - k %e     ))
(%o80) - ------------------------------------------------------------ = 
                                     2 m
                                                           k a     - k a
                                                      A (%e    + %e     ) alpha
(%i81) sol:solve(q_eq,k)
                         - 2 k a      2 k a
                       %e        (m %e      alpha + m alpha)
(%o81)            [k = -------------------------------------]
                                         2
                                        h
(%i82) answer1:2*a*factor(expand(sol/(exp((-2)*k*a)+1)))
                                  2 k a
                          2 k a %e        2 m a alpha
(%o82)                   [------------- = -----------]
                             2 k a             2
                           %e      + 1        h
(%i83) "So we have x*exp(x)/(exp(x)+1) as a function which characterizes the existance of bound state."
(%i84) "Next, the odd solution:"
(%i85) psi[3](x):=C*(exp(k*x)-exp((-k)*x))
(%o85)              psi (x) := C (exp(k x) - exp((- k) x))
                       3
(%i86) psi[4](x):=D*C*exp((-k)*x)
(%o86)                    psi (x) := D C exp((- k) x)
                             4
(%i87) c_eq2:psi[3](a) = psi[4](a)
                            k a     - k a          - k a
(%o87)                 C (%e    - %e     ) = C D %e
(%i88) define(psi[4](x),at(psi[4](x),solve(c_eq2,D)))
                                     - k x    2 k a
(%o88)                psi (x) := C %e      (%e      - 1)
                         4
(%i89) q_eq2:((-h^2)/(2*m))*at(diff(psi[4](x)-psi[3](x),x,1),x = a)
              = (-(-alpha))*psi[3](a)
          2           - k a    2 k a                k a       - k a
         h  ((- C k %e      (%e      - 1)) - C (k %e    + k %e     ))
(%o89) - ------------------------------------------------------------ = 
                                     2 m
                                                           k a     - k a
                                                      C (%e    - %e     ) alpha
(%i90) sol2:solve(q_eq2,k)
                         - 2 k a      2 k a
                       %e        (m %e      alpha - m alpha)
(%o90)            [k = -------------------------------------]
                                         2
                                        h
(%i91) answer2:radcan((2*a*sol2)/(1-exp((-2)*k*a)))
                                  2 k a
                          2 k a %e        2 m a alpha
(%o91)                   [------------- = -----------]
                             2 k a             2
                           %e      - 1        h
(%i92) "So we have x*exp(x)/(exp(x)-1) as a function which characterizes the existance of bound state."
(%i93) plot2d([(x*exp(x))/(exp(x)+1),(x*exp(x))/(exp(x)-1)],[x,0,5],[y,0,4],
              [style,[lines,1],[lines,10]],
              [gnuplot_preamble,"set key bottom right"])
plot2d: some values were clipped.
plot2d: expression evaluates to non-numeric value somewhere in plotting range.
plot2d: some values were clipped.
(%o93)        [/tmp/maxout31728.gnuplot_pipes, /tmp/maxplot.wxt]
(%i94) "Therefore, if the right hand sides 2*m*alpha/h^2 of positive number is smaller than 1, 
 then there is no odd baound state."
(%i95) rhs(answer1[1])
                                  2 m a alpha
(%o95)                            -----------
                                       2
                                      h
(%o95)           /home/rds/Documents/Maxima/QM/QM1_2018_10.mac
