/*
Simple Harmonic Oscillator in Maxima
Ray D. Sameshima

see
  https://raoul.koalatux.ch/sites/ladderoperator/data/laddersimp.pdf

*/
kill(all);

/* Dirac bra and ket */

/* Let us assume [i,j,m,n, k] be integers. */
declare( 
  [i,j,m,n, k],
  [integer, scalar]
);

/* If, for example, i is "tested", i returns featurep(i,integer),
   and this must be true since we've declare so above. 
   Then this i is assigned in an equation.
   Note that, since they are symbols, we can not use integerp. */
matchdeclare( 
  [i,j,m,n, k],
  lambda([x], featurep(x, integer))
);

/* Declare bra and ket be non scalar quantities. */
declare(
  [bra, ket],
  [nonscalar]
);

/* To simplify scalar-multiplication as we expect. */
dotscrules: true;

/* Define bra and ket abstractly; they are orthonormal. 
   If both m and n are integer (as we've stated above), then we replace 
   bra(m) . ket(n) by Kronecker's delta. */
tellsimp( bra(m) . ket(n), kron_delta(m,n));

/* Ladder operators */

/* L of the left is annihilator and R of the right is creation operator. */
declare(
  [L, R],
  [linear]
);

/* Define the ladder operators (creation and annihilation operators). */
tellsimp(R . ket(n), sqrt(n+1) * ket(n+1));
tellsimp(L . ket(n), sqrt(n  ) * ket(n-1));

/* Recursive simplification. */
tellsimp((R^^k) . ket(n), (R^^(k-1)) . (R . ket(n)));
tellsimp((L^^k) . ket(n), (L^^(k-1)) . (L . ket(n)));

/* For later usage: */
tellsimp(((L . R)^^k) . ket(n), ((L . R)^^(k-1)) . (L . R.ket(n)));

/* Impose canonical commutation relation */
tellsimp(R . L, L . R - 1);

/* The number operator is defined, with recursive simplification */
tellsimp(N . ket(n), expand(R . L . ket(n)));
tellsimp((N^^k) . ket(n), (N^^(k-1)) . (N . ket(n)));

/* Matrix representations */

/* Maxima's labeling starts from zero. */
mat_rep(lo, size) := 
  radcan(genmatrix(lambda([i,j], expand(bra(i-1). lo. ket(j-1))), size, size));

