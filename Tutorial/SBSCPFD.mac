/*
Step-By-Step Computation of a Partial Fraction Decomposition

http://maxima.sourceforge.net/docs/tutorial/en/gaertner-tutorial-revision/Pages/StepwisePF0001.htm

https://www.muskmelon.jp/maxima/pro-maxima-20080303.pdf
*/
kill(all);
r: 1/(x^2 * (x^2 + 1));
partfrac(r, x);
"Let us show this outcom step-by-step."$
"The components must be the following three rational functions:"$
p1: a/x;
p2: b/x^2;
p3: (c*x+d)/(x^2+1);
"The partial fraction decomposition is the sum of them."$
ps: p1+p2+p3;
"Let us take this numerator."$
ratsimp(ps);
n: num(%);
"OK, let us solve this numerator is 1:"$
sol: 
solve( [ coeff(n,x,3) = 0
       , coeff(n,x,2) = 0
       , coeff(n,x,1) = 0
       , coeff(n,x,0) = 1
       ]
     ,
     [a,b,c,d]
     );
ev(ps, sol[1]);
"We can also use the function first."$
ev(ps, first(sol));
"This works, but completely manually."$
"We explore a better algorithm, first extract each term in numerator:"$
terms: maplist(lambda([item], item), n);
"We transform the list of terms into a list of eqs:"$
map( lambda( [t]
           , coeff(t,x,hipow(t,x)) = coeff(r,x,hipow(t,x))
           )
   , terms
   );
"Clearly, this does not work since hipow returns 0 if t has no x."$
"Let us try the follwoing degree function (pro-maxima-20080303.pdf):"$
degree(f, x) := block([q, i, j],
  q: f,
  for i: 0 while (q # 0) do (j: i, q: quotient(q, x)), 
  return(j)
);
map( lambda( [t]
           , coeff(t,x,degree(t,x)) = coeff(r,x,degree(t,x))
           )
   , terms
   );
"Nope, we need b=1."$
/*
solve(%, [a,b,c,d]);
at(p1+p2+p3,first(%));
*/
